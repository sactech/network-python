import os
import paramiko
import socket
import ipaddress
import yaml
from getpass import getpass
import pandas as pd
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.application import MIMEApplication

def is_valid_ipv4(address):
    try:
        ipaddress.ip_address(address)
        return True
    except:
        return False

def dns_resolution(ip):
    try:
        return socket.gethostbyaddr(ip)[0]
    except (socket.herror, socket.gaierror):
        return 'Unresolvable'

def fetch_data_from_device(ip, username, password, command):
    ssh_client = paramiko.SSHClient()
    ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    try:
        ssh_client.connect(ip, username=username, password=password)
        stdin, stdout, stderr = ssh_client.exec_command(command)
        output = stdout.read().decode()
    except Exception as e:
        print(f"Error connecting to device {ip}: {e}")
        return ''
    finally:
        ssh_client.close()
    return output

def fetch_arp_and_vrf_data(ip, username, password, device_type):
    arp_data = {}
    arp_command = "sho ip arp vrf all" if device_type == 'switch' else "show ip arp"
    
    output = fetch_data_from_device(ip, username, password, arp_command).strip().split("\n")
    print("Raw command output for debugging:", output)  # Debugging line to print raw command output
    parse = False
    for line in output:
        if parse and line.strip():
            parts = line.split()
            if len(parts) >= 4 and is_valid_ipv4(parts[0]):
                ip_addr = parts[0]
                mac_addr = parts[2]
                interface = parts[3]
                arp_data[mac_addr] = (ip_addr, 'default', interface)  # Assuming 'default' VRF for simplicity
        elif "Address" in line:
            parse = True  # Start parsing from the next line onwards
    
    return arp_data

def read_yaml_file(filename):
    try:
        with open(filename, 'r') as file:
            data = yaml.safe_load(file)
        if data is None:
            return {}  # Returns an empty dictionary if the YAML file is empty or improperly formatted
        return data
    except Exception as e:
        print(f"Error reading YAML file: {e}")
        return {}

def send_email(subject, html_content, attachment_filename, recipients, smtp_server, port, sender_email, sender_password):
    msg = MIMEMultipart()
    msg['Subject'] = subject
    msg['From'] = sender_email
    msg['To'] = ', '.join(recipients)

    msg.attach(MIMEText(html_content, 'html'))

    with open(attachment_filename, 'rb') as file:
        part = MIMEApplication(file.read(), Name=attachment_filename)
    part['Content-Disposition'] = f'attachment; filename="{attachment_filename}"'
    msg.attach(part)

    with smtplib.SMTP(smtp_server, port) as server:
        server.login(sender_email, sender_password)
        server.send_message(msg)

def main():
    devices = read_yaml_file("devices.yaml")
    if not devices:  # Check if devices dict is empty
        print("No devices found in YAML file. Exiting.")
        return

    username = input("Enter SSH username: ")
    password = getpass("Enter SSH password: ")

    columns = ['Device IP', 'MAC', 'IP', 'DNS Name', 'VRF', 'Interface']
    df = pd.DataFrame(columns=columns)

    for device_type in ['routers', 'switches']:
        for ip in devices.get(device_type, []):  # Uses an empty list if the device_type key is not found
            print(f"Fetching data from {device_type[:-1]}: {ip}")
            arp_data = fetch_arp_and_vrf_data(ip, username, password, device_type[:-1])
            for mac, (ip_addr, vrf, interface) in arp_data.items():
                dns_name = dns_resolution(ip_addr)
                df.loc[len(df)] = [ip, mac, ip_addr, dns_name, vrf, interface]

    csv_filename = 'output.csv'
    df.to_csv(csv_filename, index=False)
    print("Data collection complete. Output written to CSV.")

    # Check if USE_SMTP environment variable is set to "True"
    use_smtp = os.getenv('USE_SMTP', 'False').lower() in ('true', '1', 't')
    if use_smtp:
        # Replace placeholders with your actual data
        send_email("Network Devices Data", df.to_html(index=False), csv_filename, ["recipient@example.com"], "smtp.example.com", 587, "your_email@example.com", "your_email_password")
        print("\nEmail sent.")
    else:
        print("\nSMTP email sending is disabled.")

if __name__ == "__main__":
    main()
