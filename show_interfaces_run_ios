import paramiko
import pandas as pd
import getpass
import yaml
from paramiko.ssh_exception import NoValidConnectionsError, SSHException, AuthenticationException, EOFError

# Define a custom exception for when a device is not reachable.
class DeviceNotReachableException(Exception):
    pass

# Function to convert abbreviated interface names to full names for matching
def interface_matches(full_name, abbr_name):
    abbr_to_full = {
        'Gi': 'GigabitEthernet',
        'Vl': 'Vlan',
        'Te': 'TenGigabitEthernet',
        # Add other interface abbreviations as necessary
    }
    for abbr, full in abbr_to_full.items():
        if abbr_name.startswith(abbr):
            abbr_name = abbr_name.replace(abbr, full, 1)
            break
    return full_name == abbr_name

# Function to parse the command outputs and update the data list
def parse_output(device, command, output, data):
    lines = output.strip().split('\n')[1:]  # Skip the header line
    for line in lines:
        parts = line.split()
        if len(parts) < 6:  # Check if the parts list is shorter than expected
            print(f"Warning: Skipping line due to unexpected format: {line}")
            continue
        interface = parts[0]
        if command == 'show ip interface brief':
            ip_address = parts[1] if parts[1] != 'unassigned' else ''
            status = parts[4]
            protocol = parts[5]
            data[interface] = {
                'Device': device,
                'IP-Address': ip_address,
                'OK?': parts[2],
                'Status': status,
                'Protocol': protocol,
                'Description': '',
                'Vlan': '',
                'Duplex': '',
                'Speed': '',
                'Type': ''
            }
        elif command == 'show interface description':
            description = ' '.join(parts[3:])
            if interface in data:
                data[interface]['Description'] = description
        elif command == 'show interface status':
            vlan = parts[3]
            duplex = parts[4]
            speed = parts[5]
            type = ' '.join(parts[6:])
            if interface in data:
                data[interface]['Vlan'] = vlan
                data[interface]['Duplex'] = duplex
                data[interface]['Speed'] = speed
                data[interface]['Type'] = type

# Function to load devices from a YAML file
def load_devices(file_path="devices.yaml"):
    with open(file_path, 'r') as file:
        content = yaml.safe_load(file)
    # Accessing the 'devices' list inside the 'Catalysts' dictionary
    devices = content['Catalysts']['devices']
    return devices

# Function to handle SSH connections with error checking
def ssh_connect(hostname, username, password):
    ssh_client = paramiko.SSHClient()
    ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    try:
        ssh_client.connect(hostname, username=username, password=password, look_for_keys=False, allow_agent=False)
    except NoValidConnectionsError as e:
        print(f"Device {hostname} not reachable. Error: {e}")
        raise DeviceNotReachableException(f"Device {hostname} not reachable")
    except AuthenticationException as e:
        print(f"Authentication failed for device {hostname}. Error: {e}")
        raise
    except SSHException as e:
        print(f"SSH connection failed for device {hostname}. Error: {e}")
        raise
    return ssh_client

# Main script
if __name__ == "__main__":
    username = input("Enter your SSH username: ")
    password = getpass.getpass("Enter your SSH password: ")

    devices = load_devices()
    all_data = {}

    for device in devices:
        device_data = {}
        try:
            client = ssh_connect(device['host'], username, password)
            for command in ['show ip interface brief', 'show interface description', 'show interface status']:
                try:
                    stdin, stdout, stderr = client.exec_command(command)
                    output = stdout.read().decode('utf-8')
                    parse_output(device['host'], command, output, device_data)
                except EOFError as e:
                    print(f"EOFError encountered while running '{command}' on {device['host']} - {e}")
                except SSHException as e:
                    print(f"SSHException encountered while running '{command}' on {device['host']} - {e}")
                    break  # Break out of the command loop and proceed to the next device
            client.close()
        except DeviceNotReachableException:
            print(f"Skipping device {device['host']} as it's not reachable.")
            continue
        except (AuthenticationException, SSHException):
            print(f"Skipping device {device['host']} due to authentication or SSH error.")
            continue
        all_data[device['host']] = device_data

    # Convert all_data to DataFrame
    df_rows = []
    for host, interfaces in all_data.items():
        for interface, details in interfaces.items():
            details['Interface'] = interface
            df_rows.append(details)

    df = pd.DataFrame(df_rows)
    df.to_excel('network_device_data.xlsx', index=False)

    print("Excel file created successfully.")
