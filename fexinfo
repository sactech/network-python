import paramiko
import yaml
from getpass import getpass

def read_yaml_file(filename):
    with open(filename, 'r') as file:
        data = yaml.safe_load(file)
    return data

def fetch_data_from_device(ip, username, password, command):
    ssh_client = paramiko.SSHClient()
    ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    try:
        ssh_client.connect(ip, username=username, password=password)
        stdin, stdout, stderr = ssh_client.exec_command(command)
        output = stdout.read().decode()
    except Exception as e:
        print(f"Error connecting to device {ip}: {e}")
        return ''
    finally:
        ssh_client.close()
    return output

def fetch_fex_details(ip, username, password):
    fex_details = []
    fex_output = fetch_data_from_device(ip, username, password, "show fex")
    fex_lines = fex_output.strip().split("\n")[1:]  # Skip the header line
    for line in fex_lines:
        columns = line.split()
        if len(columns) > 2 and columns[2].lower() == "online":  # Check FEX status
            fex_number = columns[0]
            active_interfaces_count = fetch_active_interface_count(ip, username, password, fex_number)
            fex_details.append((fex_number, active_interfaces_count))
    return fex_details

def fetch_active_interface_count(ip, username, password, fex_number):
    count = 0
    interfaces_output = fetch_data_from_device(ip, username, password, f"show interface status fex {fex_number}")
    for line in interfaces_output.strip().split("\n"):
        if "connected" in line.lower():  # Assuming 'connected' means the interface is up
            count += 1
    return count

def main():
    devices = read_yaml_file("devices.yaml")
    username = input("Enter SSH username: ")
    password = getpass("Enter SSH password: ")

    nexus_data = []

    for ip in devices['nexus_switches']:
        print(f"Connecting to Nexus switch: {ip}")
        try:
            serial_number = fetch_data_from_device(ip, username, password, "show version | include 'Processor Board ID'").split()[-1]
            fex_details = fetch_fex_details(ip, username, password)
            for fex_number, active_count in fex_details:
                nexus_data.append([ip, serial_number, fex_number, active_count])
        except Exception as e:
            print(f"Error processing data from Nexus switch {ip}: {e}")

    # Output to a file
    output_file = 'nexus_report.csv'
    with open(output_file, 'w') as file:
        file.write("Switch IP,Serial Number,FEX ID,Active Ports\n")
        for entry in nexus_data:
            file.write(','.join(map(str, entry)) + '\n')

    print(f"Nexus data written to {output_file}.")

if __name__ == "__main__":
    main()
