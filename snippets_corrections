import paramiko
import pandas as pd
import getpass
import yaml
import logging
import re

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def read_device_info(file_path='devices.yaml'):
    with open(file_path) as file:
        return yaml.safe_load(file).get('switches', [])

def execute_command(device, command):
    logging.info(f"Executing command on {device['ip']}: {command}")
    try:
        with paramiko.SSHClient() as ssh:
            ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            ssh.connect(device['ip'], username=device['username'], password=device['password'])
            _, stdout, _ = ssh.exec_command(command)
            return stdout.read().decode('utf-8')
    except Exception as e:
        logging.error(f"Failed to execute command on {device['ip']}: {e}")
        return ""

def parse_show_mac_address_table(output):
    mac_entries = {}
    regex = re.compile(r'(?P<vlan>\d+)\s+(?P<mac>[0-9a-f.]+)\s+\S+\s+\S+\s+\S+\s+(?P<interface>Eth\d+/\d+|Po\d+)')
    for line in output.splitlines():
        match = regex.match(line)
        if match:
            vlan, mac, interface = match.groups()
            mac_entries.setdefault(interface, []).append({'VLAN': vlan, 'MAC': mac})
    return mac_entries

def parse_show_interface_brief(output):
    brief_entries = {}
    regex = re.compile(r'^(?P<interface>Eth\d+/\d+|mgmt0)\s+(?P<vlan>\d+|--)\s+\S+\s+(?P<status>up|down)')
    for line in output.splitlines():
        match = regex.match(line)
        if match:
            interface, vlan, status = match.groups()
            brief_entries[interface] = {'VLAN': vlan, 'Status': status}
    return brief_entries

def parse_show_interface_description(output):
    desc_entries = {}
    regex = re.compile(r'^(?P<interface>Eth\d+/\d+|Po\d+|mgmt0)\s+\S+\s+\S+\s+(?P<description>.+)$')
    for line in output.splitlines():
        match = regex.match(line)
        if match:
            interface, description = match.groups()
            desc_entries[interface] = description
    return desc_entries

def combine_data(devices, mac_data, brief_data, desc_data):
    combined = []
    for device in devices:
        for interface, macs in mac_data[device['ip']].items():
            for mac in macs:
                combined.append({
                    'Device': device['ip'],
                    'Interface': interface,
                    'MAC Address': mac['MAC'],
                    'VLAN': mac['VLAN'],
                    'Status': brief_data[device['ip']].get(interface, {}).get('Status', 'N/A'),
                    'Description': desc_data[device['ip']].get(interface, 'N/A'),
                })
    return combined

def main():
    devices_info = read_device_info()
    devices = [{'ip': ip, 'username': 'admin', 'password': 'admin'} for ip in devices_info] # Example credentials

    mac_data, brief_data, desc_data = {}, {}, {}
    for device in devices:
        mac_data[device['ip']] = parse_show_mac_address_table(execute_command(device, "show mac address-table"))
        brief_data[device['ip']] = parse_show_interface_brief(execute_command(device, "show interface brief"))
        desc_data[device['ip']] = parse_show_interface_description(execute_command(device, "show interface description"))

    combined_data = combine_data(devices, mac_data, brief_data, desc_data)
    if combined_data:
        df = pd.DataFrame(combined_data)
        df.to_csv('network_data_combined.csv', index=False)
        logging.info("Data successfully saved to 'network_data_combined.csv'.")
    else:
        logging.warning("No data collected.")

if __name__ == "__main__":
    main()
