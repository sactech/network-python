import paramiko
import pandas as pd
import getpass
import yaml
import logging
import re
from paramiko import SSHClient, AutoAddPolicy

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def read_device_info(file_path='devices.yaml'):
    with open(file_path) as file:
        devices = yaml.safe_load(file)
    return devices.get('switches', [])

def execute_command(host, username, password, command):
    try:
        with SSHClient() as client:
            client.set_missing_host_key_policy(AutoAddPolicy())
            client.connect(hostname=host, username=username, password=password, timeout=10)
            stdin, stdout, stderr = client.exec_command(command)
            return stdout.read().decode('utf-8').strip()
    except Exception as e:
        logging.error(f"Failed to execute command on {host}: {e}")
        return ""

def parse_show_interface_description(output):
    desc_entries = {}
    regex = re.compile(r'^(?P<interface>mgmt0|Eth[\d/]+|Po\d+|Lo\d+)\s+(?P<description>.*)')
    for line in output.splitlines():
        match = regex.search(line)
        if match:
            desc_entries[match.group('interface')] = match.group('description')
    return desc_entries

def parse_show_interface_brief(output):
    brief_entries = {}
    regex = re.compile(r'^(?P<interface>mgmt0|Eth[\d/]+|Po\d+|Lo\d+)\s+\d+\s+(?P<status>up|down|administratively down)\s+\d+\s+(?P<vlan>\d+|--)')
    for line in output.splitlines():
        match = regex.search(line)
        if match:
            brief_entries[match.group('interface')] = {'status': match.group('status'), 'vlan': match.group('vlan')}
    return brief_entries

def parse_show_mac_address_table(output):
    mac_entries = {}
    regex = re.compile(r'(?P<vlan>\d+|\-)\s+(?P<mac>[0-9a-f]{4}\.[0-9a-f]{4}\.[0-9a-f]{4})\s+\S+\s+\S+\s+(?P<port>\S+)')
    for line in output.splitlines():
        match = regex.search(line)
        if match:
            port = match.group('port')
            if port not in mac_entries:
                mac_entries[port] = []
            mac_entries[port].append(match.group('mac'))
    return mac_entries

def combine_data(device, brief_data, desc_data, mac_data):
    combined_data = []
    for interface, brief_info in brief_data.items():
        entry = {
            'Device': device,
            'Interface': interface,
            'Description': desc_data.get(interface, 'N/A'),
            'Status': brief_info.get('status', 'N/A'),
            'VLAN': brief_info.get('vlan', 'N/A'),
            'MAC Addresses': ', '.join(mac_data.get(interface, ['N/A']))
        }
        combined_data.append(entry)
    return combined_data

def main():
    devices = read_device_info()
    username = input("Enter SSH username: ")
    password = getpass.getpass("Enter SSH password: ")
    all_data = []

    for device in devices:
        logging.info(f"Processing device: {device}")
        desc_output = execute_command(device, username, password, "show interface description")
        brief_output = execute_command(device, username, password, "show interface brief")
        mac_output = execute_command(device, username, password, "show mac address-table")

        desc_data = parse_show_interface_description(desc_output)
        brief_data = parse_show_interface_brief(brief_output)
        mac_data = parse_show_mac_address_table(mac_output)

        combined_data = combine_data(device, brief_data, desc_data, mac_data)
        all_data.extend(combined_data)

    if all_data:
        df = pd.DataFrame(all_data)
        df.to_csv('network_data_combined.csv', index=False)
        logging.info("Data successfully saved to 'network_data_combined.csv'.")
    else:
        logging.warning("No data collected.")

if __name__ == "__main__":
    main()
