from netmiko import ConnectHandler
import pandas as pd
import getpass
import yaml
import re

# Parsing functions
def parse_mac_address_table(output):
    """Parse the 'show mac address-table' output to collect MAC addresses."""
    mac_data = {}
    regex = re.compile(r'^\*\s+\d+\s+([\da-fA-F.]+)\s+\w+\s+\d+\s+\w+\s+\w+\s+(\S+)')
    for line in output.splitlines():
        match = regex.search(line.strip())
        if match:
            mac_address, port = match.groups()
            mac_data.setdefault(port, []).append(mac_address)
    return mac_data

def parse_interface_brief(output):
    """Parse the 'show interface brief' output."""
    brief_data = {}
    regex = re.compile(r'^(Eth\d+/\d+)\s+(\d+|--)\s+\w+\s+\w+\s+(\w+)')
    for line in output.splitlines():
        match = regex.search(line.strip())
        if match:
            interface, vlan, status = match.groups()
            vlan = vlan if vlan != '--' else 'N/A'
            brief_data[interface] = {'VLAN': vlan, 'Status': status}
    return brief_data

def parse_interface_description(output):
    """Parse the 'show interface description' output."""
    desc_data = {}
    regex = re.compile(r'^(Eth\d+/\d+)\s+eth\s+\d+\s+(.*)$')
    for line in output.splitlines():
        match = regex.search(line.strip())
        if match:
            interface, description = match.groups()
            desc_data[interface] = description or 'N/A'
    return desc_data

# Device command execution and data collection
def collect_data_from_device(device_info):
    device_type = 'cisco_nxos'  # For Cisco Nexus devices
    ssh_connection = ConnectHandler(device_type=device_type, **device_info)
    collected_data = {
        'mac_address_table': parse_mac_address_table(ssh_connection.send_command("show mac address-table")),
        'interface_brief': parse_interface_brief(ssh_connection.send_command("show interface brief")),
        'interface_description': parse_interface_description(ssh_connection.send_command("show interface description")),
    }
    ssh_connection.disconnect()
    return collected_data

# Main function
def main():
    devices_yaml = 'devices.yaml'
    with open(devices_yaml) as file:
        devices = yaml.safe_load(file).get('switches', [])

    username = input("Enter SSH username: ")
    password = getpass.getpass("Enter SSH password: ")

    all_data = []
    for device_ip in devices:
        device_info = {
            'host': device_ip,
            'username': username,
            'password': password,
            'secret': password,  # Assuming enable password is the same
        }
        device_data = collect_data_from_device(device_info)
        
        # Data combination logic goes here
        # This is a placeholder for how you might start combining your data.
        # You will need to expand upon this to meet your exact requirements.
        
        for interface, macs in device_data['mac_address_table'].items():
            for mac in macs:
                brief_info = device_data['interface_brief'].get(interface, {})
                desc_info = device_data['interface_description'].get(interface, 'N/A')
                combined_entry = {
                    'Device': device_ip,
                    'Interface': interface,
                    'Description': desc_info,
                    'VLAN': brief_info.get('VLAN', 'N/A'),
                    'Status': brief_info.get('Status', 'N/A'),
                    'MAC Address': mac,
                }
                all_data.append(combined_entry)

    if all_data:
        df = pd.DataFrame(all_data)
        df.to_csv('network_data_combined.csv', index=False)
        print("Data successfully saved to 'network_data_combined.csv'.")
    else:
        print("No data collected.")

if __name__ == "__main__":
    main()
