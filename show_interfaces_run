import paramiko
import pandas as pd
import yaml
from getpass import getpass

# Function to create an SSH client and connect to a device
def create_ssh_client(ip, username, password):
    ssh_client = paramiko.SSHClient()
    ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    try:
        ssh_client.connect(hostname=ip, username=username, password=password)
        return ssh_client
    except Exception as e:
        print(f"An error occurred while connecting to {ip}: {e}")
        return None

# Function to execute command on the device and return the output
def execute_command(ssh_client, command):
    try:
        stdin, stdout, stderr = ssh_client.exec_command(command)
        return stdout.read().decode('utf-8').strip()
    except Exception as e:
        print(f"An error occurred while executing command on {ssh_client.get_transport().getpeername()[0]}: {e}")
        return ""

# Functions to parse outputs of specific commands
def parse_show_ip_int_brief(output):
    # Extract necessary lines and return structured data as a list of dictionaries
    pass

def parse_show_int_status(output):
    # Extract necessary lines and return structured data as a list of dictionaries
    pass

def parse_show_run_int(output):
    # Extract necessary lines and return structured data as a list of dictionaries
    pass

# Main execution function
def main(yaml_file):
    with open(yaml_file) as file:
        devices = yaml.safe_load(file)

    all_data = []

    for category, devices_list in devices.items():
        for device_name in devices_list:
            print(f"Connecting to {device_name}...")
            username = input(f"Username for {device_name}: ")
            password = getpass(f"Password for {device_name}: ")

            ssh_client = create_ssh_client(device_name, username, password)
            if ssh_client is None:
                continue

            # Execute and parse Layer 3 interface details
            l3_output = execute_command(ssh_client, 'show ip int brief vrf all')
            l3_data = parse_show_ip_int_brief(l3_output)
            all_data.extend(l3_data)

            # Execute and parse Layer 2 interface details
            l2_output = execute_command(ssh_client, 'show int status | include connected')
            l2_data = parse_show_int_status(l2_output)
            all_data.extend(l2_data)

            # Close the SSH connection
            ssh_client.close()

    # Convert the list of dictionaries to a DataFrame and save as a CSV file
    df = pd.DataFrame(all_data)
    df.to_csv("network_interfaces.csv", index=False)
    print("Data collection complete. CSV file created.")

if __name__ == "__main__":
    yaml_file = 'devices.yaml'  # Replace with your YAML file path
    main(yaml_file)