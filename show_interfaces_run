import re
import pandas as pd
import yaml
import paramiko
from getpass import getpass

def load_devices(yaml_file_path):
    with open(yaml_file_path) as file:
        return yaml.safe_load(file)

def parse_show_ip_int_brief(output):
    # Adjust your parsing logic here based on actual output
    return []

def parse_show_int_status(output):
    # Adjust your parsing logic here based on actual output
    return []

def execute_command(ssh_client, command):
    stdin, stdout, stderr = ssh_client.exec_command(command)
    return stdout.read().decode('utf-8').strip()

def process_device_group(group_name, devices, all_device_data):
    for device in devices:
        print(f"Processing {group_name} device {device['host']}")
        username = input(f"Username for {device['host']}: ")
        password = getpass(f"Password for {device['host']}: ")

        ssh_client = paramiko.SSHClient()
        ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        try:
            ssh_client.connect(hostname=device['host'], username=username, password=password)
            # Example command execution - adjust these commands based on the group
            if group_name == "Nexus":
                output = execute_command(ssh_client, "show ip int brief vrf all")
                all_device_data.extend(parse_show_ip_int_brief(output))
            elif group_name == "Catalyst":
                output = execute_command(ssh_client, "show int status | include connected")
                all_device_data.extend(parse_show_int_status(output))
        except Exception as e:
            print(f"Failed to connect or execute commands on {device['host']}: {e}")
        finally:
            ssh_client.close()

def main():
    yaml_file_path = 'devices.yaml'
    devices_by_category = load_devices(yaml_file_path)
    all_device_data = []

    for category, devices in devices_by_category.items():
        process_device_group(category, devices, all_device_data)

    df = pd.DataFrame(all_device_data)
    df.to_csv('network_data.csv', index=False)
    print("Data collection complete. CSV file created.")

if __name__ == "__main__":
    main()