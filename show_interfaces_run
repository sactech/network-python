import paramiko
import pandas as pd
import getpass
import yaml
from paramiko.ssh_exception import NoValidConnectionsError, SSHException, AuthenticationException

# Define a custom exception for when a device is not reachable.
class DeviceNotReachableException(Exception):
    pass

# Function to convert abbreviated interface names to full names for matching
def interface_matches(full_name, abbr_name):
    abbr_to_full = {
        'Gi': 'GigabitEthernet',
        'Vl': 'Vlan',
        'Te': 'TenGigabitEthernet',
        # Add other interface abbreviations as necessary
    }
    for abbr, full in abbr_to_full.items():
        if abbr_name.startswith(abbr):
            abbr_name = abbr_name.replace(abbr, full, 1)
            break
    return full_name == abbr_name

# Function to parse the command outputs and update the data list
def parse_output(device, command, output, data):
    lines = output.strip().split('\n')[1:]  # Skip the header line
    for line in lines:
        parts = line.split()
        # Verify we have enough parts to avoid IndexError
        if len(parts) < 6:
            print(f"Warning: Skipping line due to unexpected format: {line}")
            continue
        interface = parts[0]
        if command == 'show ip interface brief':
            ip_address = parts[1] if parts[1] != 'unassigned' else ''
            status = parts[4]
            protocol = parts[5]
            data[interface] = {
                'Device': device,
                'IP-Address': ip_address,
                'OK?': parts[2],
                'Status': status,
                'Protocol': protocol,
                'Description': '',
                'Vlan': '',
                'Duplex': '',
                'Speed': '',
                'Type': ''
            }
        elif command == 'show interface description':
            # Assuming 'parts[3]' exists or using a check similar to above
            description = ' '.join(parts[3:])
            if interface in data:
                data[interface]['Description'] = description
        elif command == 'show interface status':
            # Assuming 'parts[6]' exists or using a check similar to above
            vlan = parts[3]
            duplex = parts[4]
            speed = parts[5]
            type = ' '.join(parts[6:])
            if interface in data:
                data[interface]['Vlan'] = vlan
                data[interface]['Duplex'] = duplex
                data[interface]['Speed'] = speed
                data[interface]['Type'] = type
                    })
                    break

# Function to load devices from a YAML file
def load_devices(file_path="devices.yaml"):
    with open(file_path, 'r') as file:
        content = yaml.safe_load(file)
    devices = []
    for category in content.values():
        devices.extend(category['devices'])
    return devices

# Function to handle SSH connections with error checking
def ssh_connect(hostname, username, password):
    ssh_client = paramiko.SSHClient()
    ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    try:
        ssh_client.connect(hostname, username=username, password=password, look_for_keys=False, allow_agent=False)
    except NoValidConnectionsError as e:
        print(f"Device {hostname} not reachable. Error: {e}")
        raise DeviceNotReachableException(f"Device {hostname} not reachable")
    except AuthenticationException as e:
        print(f"Authentication failed for device {hostname}. Error: {e}")
        raise
    except SSHException as e:
        print(f"SSH connection failed for device {hostname}. Error: {e}")
        raise
    return ssh_client

# Main script
if __name__ == "__main__":
    username = input("Enter your SSH username: ")
    password = getpass.getpass("Enter your SSH password: ")

    devices = load_devices()
    all_data = []

    for device in devices:
        try:
            client = ssh_connect(device['host'], username, password)
            device_data = {}
            for command in ['show ip interface brief', 'show interface description', 'show interface status']:
                stdin, stdout, stderr = client.exec_command(command)
                output = stdout.read().decode('utf-8')
                parse_output(device['host'], command, output, device_data)
            all_data.append(device_data)
            client.close()
        except DeviceNotReachableException:
            continue  # Skip this device and move to the next one
        except (AuthenticationException, SSHException):
            continue  # Skip this device and move to the next one

    # Convert all_data to DataFrame
    df_rows = []
    for device_info in all_data:
        for interface, details in device_info.items():
            row = {'Device': details['Device'], 'Interface': interface}
            row.update(details)
            df_rows.append(row)

    # Assuming the parsing fills device_data with correct info
    df = pd.DataFrame(df_rows)

    # Specify the columns order if needed
    df = df[['Device', 'Interface', 'IP-Address', 'OK?', 'Status', 'Protocol', 'Description', 'Vlan', 'Duplex', 'Speed', 'Type']]

    # Write the DataFrame to an Excel file
    df.to_excel('network_device_data.xlsx', index=False)

    print("Excel file created successfully.")
