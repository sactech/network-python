import re
import pandas as pd
import yaml
import paramiko
from getpass import getpass

# Load devices from the YAML file
def load_devices(yaml_file_path):
    with open(yaml_file_path) as file:
        return yaml.safe_load(file)

# Create an SSH client and connect to a device
def create_ssh_client(hostname, username, password):
    ssh_client = paramiko.SSHClient()
    ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    try:
        ssh_client.connect(hostname=hostname, username=username, password=password)
        return ssh_client
    except Exception as e:
        print(f"An error occurred while connecting to {hostname}: {e}")
        return None

# Execute a command on the device and return the output
def execute_command(ssh_client, command):
    stdin, stdout, stderr = ssh_client.exec_command(command)
    return stdout.read().decode('utf-8').strip()

# Parse the 'show int status | include connected' output for Catalyst devices
def parse_catalyst_int_status(output):
    pattern = re.compile(r'(\S+)\s+connected\s+.*')
    interfaces = []
    for line in output.splitlines():
        match = pattern.match(line)
        if match:
            interfaces.append(match.group(1))
    return interfaces

# Get interface configuration
def get_interface_configuration(ssh_client, interface):
    command = f'show run interface {interface}'
    output = execute_command(ssh_client, command)
    return parse_interface_config(output)

# Parse the 'show run interface' output for an interface
def parse_interface_config(output):
    config = {
        'Interface': '',
        'Description': '',
        'IP Address': '',
        'VRF': '',
        'Switchport Mode': '',
        'Switchport Access VLAN': '',
        'Switchport Trunk Allowed VLAN': '',
        'Switchport Trunk Native VLAN': '',
    }
    for line in output.splitlines():
        line = line.strip()
        if line.startswith('interface'):
            config['Interface'] = line.split()[-1]
        elif line.startswith('description'):
            config['Description'] = line.split(' ', 1)[1]
        elif line.startswith('ip address'):
            config['IP Address'] = line.split()[2]
        elif line.startswith('vrf member'):
            config['VRF'] = line.split()[-1]
        elif line.startswith('switchport mode'):
            config['Switchport Mode'] = line.split()[-1]
        elif line.startswith('switchport access vlan'):
            config['Switchport Access VLAN'] = line.split()[-1]
        elif line.startswith('switchport trunk allowed vlan'):
            config['Switchport Trunk Allowed VLAN'] = line.split()[-1]
        elif line.startswith('switchport trunk native vlan'):
            config['Switchport Trunk Native VLAN'] = line.split()[-1]
    return config

# Main execution function
def main():
    yaml_file_path = 'devices.yaml'  # Specify the path to your YAML file
    devices_by_category = load_devices(yaml_file_path)

    # Prompt for credentials
    username = input("Enter username for all devices: ")
    password = getpass("Enter password for all devices: ")

    all_device_data = []

    # Iterate over each device category and device within it
    for category, devices in devices_by_category.items():
        for device in devices:
            hostname = device['host']
            print(f"Processing {category} device: {hostname}...")

            # Connect to the device
            ssh_client = create_ssh_client(hostname, username, password)
            if ssh_client:
                try:
                    # Execute and parse commands based on device category
                    if category.lower() == 'nexus':
                        # Your Nexus-specific logic will go here
                        pass
                    elif category.lower() == 'catalyst':
                        interfaces = parse_catalyst_int_status(
                            execute_command(ssh_client, 'show int status | include connected'))
                        for interface in interfaces:
                            config = get_interface_configuration(ssh_client, interface)
                            all_device_data.append(config)
                except Exception as e:
                    print(f"An error occurred while processing {hostname}: {e}")
                finally:
                    ssh_client.close()

    # Convert the aggregated data to a DataFrame and output to a CSV file
    df = pd.DataFrame(all_device_data)
    df.to_csv('network_data.csv', index=False)
    print("Data collection complete. CSV file created.")

if __name__ == "__main__":
    main()
