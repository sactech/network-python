import re
import pandas as pd
import yaml
import paramiko
from getpass import getpass

# Function to load devices from YAML file
def load_devices(yaml_file_path):
    with open(yaml_file_path) as file:
        return yaml.safe_load(file)

# Function to create an SSH client and connect to a device
def create_ssh_client(hostname, username, password):
    ssh_client = paramiko.SSHClient()
    ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    try:
        ssh_client.connect(hostname=hostname, username=username, password=password)
        return ssh_client
    except Exception as e:
        print(f"An error occurred while connecting to {hostname}: {e}")
        return None

# Function to execute command on the device and return the output
def execute_command(ssh_client, command):
    stdin, stdout, stderr = ssh_client.exec_command(command)
    return stdout.read().decode('utf-8').strip()

# Parse the 'show ip int brief' output for Nexus devices
def parse_nexus_ip_int_brief(output):
    pattern = re.compile(r'(\S+)\s+(\d+\.\d+\.\d+\.\d+)\s+\S+\s+\S+\s+(up|down)\s+(up|down)')
    data = []
    for line in output.split('\n'):
        match = pattern.match(line)
        if match:
            data.append({
                'Interface': match.group(1),
                'IP Address': match.group(2),
                'Status': match.group(3),
                'Protocol': match.group(4)
            })
    return data

# Parse the 'show int status' output for Catalyst devices
def parse_catalyst_int_status(output):
    pattern = re.compile(r'(\S+)\s+connected\s+(\d+)\s+.*\s+(\S+)\s+')
    data = []
    for line in output.split('\n'):
        match = pattern.match(line)
        if match:
            data.append({
                'Interface': match.group(1),
                'VLAN': match.group(2),
                'Type': match.group(3)
            })
    return data

# Main function
def main():
    yaml_file_path = 'devices.yaml'  # Specify the path to your YAML file
    devices_by_category = load_devices(yaml_file_path)

    username = input("Enter username for all devices: ")
    password = getpass("Enter password for all devices: ")

    all_device_data = []

    for category, device_list in devices_by_category.items():
        for hostname in device_list:
            print(f"Connecting to {category} device: {hostname}...")

            ssh_client = create_ssh_client(hostname, username, password)
            if ssh_client:
                try:
                    if category.lower() == 'nexus':
                        command = 'show ip int brief vrf all'
                        output = execute_command(ssh_client, command)
                        parsed_data = parse_nexus_ip_int_brief(output)
                        all_device_data.extend(parsed_data)
                    elif category.lower() == 'catalyst':
                        command = 'show int status | include connected'
                        output = execute_command(ssh_client, command)
                        parsed_data = parse_catalyst_int_status(output)
                        all_device_data.extend(parsed_data)
                finally:
                    ssh_client.close()

    df = pd.DataFrame(all_device_data)
    df.to_csv('network_data.csv', index=False)
    print("Data collection complete. CSV file created.")

if __name__ == "__main__":
    main()